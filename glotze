#!/usr/bin/perl

use strict;

use utf8;
use Glib qw/TRUE FALSE/;
use Gtk2;
use Net::HTTP;
use IPC::Open3;
use File::Spec;
use Symbol qw(gensym);

my $DREAMBOX_IP="192.168.1.8";
my $remote_control_port="127.0.0.1:9645";

my $VLC_BIN="/usr/bin/vlc";
my $VLC_ARGS="--verbose 0 --rc-host $remote_control_port";
my $vlc; # tcp socket to rc vlc console
my $vlc_pid;

my $window;
my $vbox;

sub gtk2_delete_event
{
	kill 9, $vlc_pid;
	return FALSE;
}
sub gtk2_destroy
{
	kill 9, $vlc_pid;
	Gtk2->main_quit;
}

sub channel_list
{
	# /body
	#print "senderliste\n";
	my $s = Net::HTTP->new(Host => $DREAMBOX_IP) || die $@;
	$s->write_request(GET => "/body");
	my $l="";
	while (1) {
		my $buf;
		my $n = $s->read_entity_body($buf, 1024);
		die "read failed: $!" unless defined $n;
		last unless $n;
		$l .= $buf;
	}

	my $chan_array;
	my @chan;
	my $chan_ref_array;
	my @chan_ref;

	($chan_array) = ( $l =~ m{channels\[0\] = new Array\((.*)\);}g );
	($chan_ref_array) = ( $l =~ m{channelRefs\[0\] = new Array\((.*)\);}g );

	@chan = ( $chan_array =~ m{"\([0-9]{2}\.[0-9][EW]\) ([^"]*)"}g );
	@chan_ref = ( $chan_ref_array =~ m{"([^"]*)"}g );

#	print "@chan\n";
#	print "@chan_ref\n";

	# remove "old" buttons
	my @vbutt = $vbox->get_children;
	my $skip=1;
	foreach my $c (@vbutt)
	{
		if ($skip){
			$skip--;
		}else{
			$vbox->remove($c);
		}
	}

	my $button;
	my $i=0;
	foreach my $c (@chan)
	{
		utf8::decode($c);
		print "$c\n";
		$button = Gtk2::Button->new($c);
		$button->signal_connect(clicked => \&switch_channel, $chan_ref[$i]);
		$vbox->add($button);
		$button->show;
		$i++;
	}
}

sub switch_channel
{
	# /cgi-bin/zapTo?path=$channel&curBouquet=0&curChannel=1
	# /cgi-bin/zapTo?path=$channel&curBouquet=0
	my ($button, $channel) = @_;
	my $s = Net::HTTP->new(Host => $DREAMBOX_IP) || die $@;
	$s->write_request(GET => "/cgi-bin/zapTo?path=$channel&curBouquet=0");
#	print $channel ."\n";

	sleep 1;
	print $vlc "add http://$DREAMBOX_IP/video.m3u\n";
	channel_list;
}

sub proginfo
{
	# /cgi-bin/channelinfo
	#print "proginfo\n";
	my $s = Net::HTTP->new(Host => $DREAMBOX_IP) || die $@;
	$s->write_request(GET => "/cgi-bin/channelinfo");
	my $l="";
	while (1) {
		my $buf;
		my $n = $s->read_entity_body($buf, 1024);
		die "read failed: $!" unless defined $n;
		last unless $n;
		$l .= $buf;
	}

	my $station;
	my @timing;
	my @event;
	my @description;

	($station) = ( $l =~ m{<th colspan="3">([^<]*)</th>}g );
	@timing = ( $l =~ m{<td><span class="time">([0-9]{2}:[0-9]{2})<\/span><\/td>}g );
	@event = ( $l =~ m{<span class="event">([^<]*)<\/span>}g );
	@description = ( $l =~ m{<span class="description">([^<]*)<\/span>}g );

	print "$station\n";
	print "@timing\n";
	print "@event\n";
	print "@description\n";
}

# key press event
use Gtk2::Gdk::Keysyms;
sub keyp{
	my ($wid, $event) = @_;
	
	# cursor keys
	if ($event->keyval == $Gtk2::Gdk::Keysyms{Up})
	{
		# /cgi-bin/zapTo?path="+xy+"&curBouquet="+bouquet+"&curChannel="+channel
		print"up\n";
	}
	if ($event->keyval == $Gtk2::Gdk::Keysyms{Down})
	{
		# /cgi-bin/zapTo?path="+xy+"&curBouquet="+bouquet+"&curChannel="+channel
		print"down\n";
	}
	if ($event->keyval == $Gtk2::Gdk::Keysyms{Right})
	{
		# /setVolume?volume=
	}
	if ($event->keyval == $Gtk2::Gdk::Keysyms{Left})
	{
		# /setVolume?volume=
	}
	if ($event->keyval == $Gtk2::Gdk::Keysyms{space})
	{
		# /setVolume?mute=
	}

	# quit on q
	if ($event->keyval == $Gtk2::Gdk::Keysyms{q})
	{
		kill 9, $vlc_pid;
		exit(0);
	}

	0;
}

sub gtk2_bringup
{
	Gtk2->init;

	$window = new Gtk2::Window( 'toplevel' );
	$window->signal_connect(delete_event => \&gtk2_delete_event);
	$window->signal_connect(destroy => \&gtk2_destroy);
	$window->set_title(" -=#[ get a 1st life ]#=- ");
	$window->set_border_width(8);

	$vbox = Gtk2::VBox->new(FALSE, 0);
	$window->add($vbox);

	my $hbox = Gtk2::HBox->new(FALSE, 0);
	$vbox->add($hbox);

	my $button;
	$button = Gtk2::Button->new("Senderliste");
	$button->signal_connect(clicked => \&channel_list, $window);
	$hbox->add($button);
	$button = Gtk2::Button->new("Info");
	$button->signal_connect(clicked => \&proginfo, $window);
	$hbox->add($button);

	channel_list;

	$window->signal_connect('key-press-event' , sub {keyp @_;});
	$window->show_all();
}

sub vlc_bringup
{
	$vlc_pid = fork;
	if (!$vlc_pid){
		my @cmd=split(" ", "$VLC_BIN $VLC_ARGS http://$DREAMBOX_IP/video.m3u");

		exec(@cmd);
		exit 23;
	}

	while (undef == ($vlc = IO::Socket::INET->new(PeerAddr => $remote_control_port)))
		{ sleep 1; }
}

sub main
{
	gtk2_bringup;
	vlc_bringup;
	Gtk2->main;
}

main;
0;

